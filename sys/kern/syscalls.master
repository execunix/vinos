	$NetBSD: syscalls.master,v 1.270.2.1 2015/02/24 10:47:17 martin Exp $

;	@(#)syscalls.master	8.2 (Berkeley) 1/13/94

; NetBSD system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, IGNORED, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; Optional fields are specified after the type field
; (NOTE! they *must* be specified in this order):
;	MODULAR:attempt to autoload system call if not present
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	IGNORED	syscall is a null op, but always succeeds
;	UNIMPL	unimplemented, not included in system
;	EXCL	implemented, but not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;	INDIR	included, but don't define the syscall args structure,
;		and allow it to be "really" varargs.
;	NOERR	included, syscall does not set errno
;	EXTERN	implemented, but as 3rd party module
;
; arguments:
;	PAD	argument not part of the C interface, used only for padding
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ return_type|prefix|compat(optional)|basename(pseudo-proto); } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall names and switch definition files only.

#include "opt_modular.h"
#include "opt_ntp.h"
#include "opt_sysv.h"

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/socket.h>
#include <sys/mount.h>
#include <sys/sched.h>
#include <sys/syscallargs.h>

%%

; Reserved/unimplemented system calls in the range 0-150 inclusive
; are reserved for use in future Berkeley releases.
; Additional system calls implemented in vendor and other
; redistributions should be placed in the reserved range at the end
; of the current calls.

0	INDIR		{ int|sys||syscall(int code, \
			    ... register_t args[SYS_MAXSYSARGS]); }
1	STD 		{ void|sys||exit(int rval); }
2	STD 		{ int|sys||fork(void); }
3	STD 		{ ssize_t|sys||read(int fd, void *buf, size_t nbyte); }
4	STD 		{ ssize_t|sys||write(int fd, const void *buf, \
			    size_t nbyte); }
5	STD 		{ int|sys||open(const char *path, \
			    int flags, ... mode_t mode); }
6	STD		{ int|sys||close(int fd); }
7	UNIMPL
8	UNIMPL
9	STD 		{ int|sys||link(const char *path, const char *link); }
10	STD 		{ int|sys||unlink(const char *path); }
11	OBSOL		execv
12	STD 		{ int|sys||chdir(const char *path); }
13	STD 		{ int|sys||fchdir(int fd); }
14	UNIMPL
15	STD 		{ int|sys||chmod(const char *path, mode_t mode); }
16	STD 		{ int|sys||chown(const char *path, uid_t uid, \
			    gid_t gid); }
17	STD 		{ int|sys||obreak(char *nsize); } break
18	UNIMPL
19	UNIMPL
20	NOERR 		{ pid_t|sys||getpid_with_ppid(void); } getpid
21	UNIMPL
22	STD 		{ int|sys||unmount(const char *path, int flags); }
23	STD 		{ int|sys||setuid(uid_t uid); }
24	NOERR 		{ uid_t|sys||getuid_with_euid(void); } getuid
25	NOERR 		{ uid_t|sys||geteuid(void); }
26	STD 		{ int|sys||ptrace(int req, pid_t pid, void *addr, \
			    int data); }
27	STD 		{ ssize_t|sys||recvmsg(int s, struct msghdr *msg, \
			    int flags); }
28	STD 		{ ssize_t|sys||sendmsg(int s, \
			    const struct msghdr *msg, int flags); }
29	STD 		{ ssize_t|sys||recvfrom(int s, void *buf, size_t len, \
			    int flags, struct sockaddr *from, \
			    socklen_t *fromlenaddr); }
30	STD		{ int|sys||accept(int s, struct sockaddr *name, \
			    socklen_t *anamelen); }
31	STD		{ int|sys||getpeername(int fdes, struct sockaddr *asa, \
			    socklen_t *alen); }
32	STD		{ int|sys||getsockname(int fdes, struct sockaddr *asa, \
			    socklen_t *alen); }
33	STD 		{ int|sys||access(const char *path, int flags); }
34	STD 		{ int|sys||chflags(const char *path, u_long flags); }
35	STD 		{ int|sys||fchflags(int fd, u_long flags); }
36	NOERR 		{ void|sys||sync(void); }
37	STD 		{ int|sys||kill(pid_t pid, int signum); }
38	UNIMPL
39	NOERR 		{ pid_t|sys||getppid(void); }
40	UNIMPL
41	STD 		{ int|sys||dup(int fd); }
42	STD 		{ int|sys||pipe(void); }
43	NOERR 		{ gid_t|sys||getegid(void); }
44	STD 		{ int|sys||profil(char *samples, size_t size, \
			    u_long offset, u_int scale); }
45	STD 		{ int|sys||ktrace(const char *fname, int ops, \
			    int facs, pid_t pid); }
46	UNIMPL
47	NOERR 		{ gid_t|sys||getgid_with_egid(void); } getgid
48	UNIMPL
49	STD 		{ int|sys||__getlogin(char *namebuf, size_t namelen); }
50	STD 	 	{ int|sys||__setlogin(const char *namebuf); }
51	STD 		{ int|sys||acct(const char *path); }
52	UNIMPL
53	UNIMPL
54	STD		{ int|sys||ioctl(int fd, \
			    u_long com, ... void *data); }
55	UNIMPL
56	STD 		{ int|sys||revoke(const char *path); }
57	STD 		{ int|sys||symlink(const char *path, \
			    const char *link); }
58	STD 		{ ssize_t|sys||readlink(const char *path, char *buf, \
			    size_t count); }
59	STD 		{ int|sys||execve(const char *path, \
			    char * const *argp, char * const *envp); }
60	STD 		{ mode_t|sys||umask(mode_t newmask); }
61	STD 		{ int|sys||chroot(const char *path); }
62	UNIMPL
63	UNIMPL
64	UNIMPL
65	UNIMPL
; XXX COMPAT_??? for 4.4BSD-compatible vfork(2)?
66	STD 		{ int|sys||vfork(void); }
67	OBSOL		vread
68	OBSOL		vwrite
69	STD 		{ int|sys||sbrk(intptr_t incr); }
70	STD 		{ int|sys||sstk(int incr); }
71	UNIMPL
72	STD 		{ int|sys||ovadvise(int anom); } vadvise
73	STD 		{ int|sys||munmap(void *addr, size_t len); }
74	STD 		{ int|sys||mprotect(void *addr, size_t len, \
			    int prot); }
75	STD 		{ int|sys||madvise(void *addr, size_t len, \
			    int behav); }
76	OBSOL		vhangup
77	OBSOL		vlimit
78	STD 		{ int|sys||mincore(void *addr, size_t len, \
			    char *vec); }
79	STD 		{ int|sys||getgroups(int gidsetsize, \
			    gid_t *gidset); }
80	STD 		{ int|sys||setgroups(int gidsetsize, \
			    const gid_t *gidset); }
81	STD 		{ int|sys||getpgrp(void); }
82	STD 		{ int|sys||setpgid(pid_t pid, pid_t pgid); }
83	UNIMPL
84	UNIMPL
85	UNIMPL
86	UNIMPL
87	UNIMPL
88	UNIMPL
89	UNIMPL
90	STD 		{ int|sys||dup2(int from, int to); }
91	UNIMPL		getdopt
92	STD		{ int|sys||fcntl(int fd, int cmd, ... void *arg); }
93	UNIMPL
94	UNIMPL		setdopt
95	STD	 	{ int|sys||fsync(int fd); }
96	STD 		{ int|sys||setpriority(int which, id_t who, int prio); }
97	UNIMPL
98	STD		{ int|sys||connect(int s, const struct sockaddr *name, \
			    socklen_t namelen); }
99	UNIMPL
100	STD 		{ int|sys||getpriority(int which, id_t who); }
101	UNIMPL
102	UNIMPL
103	UNIMPL
104	STD		{ int|sys||bind(int s, const struct sockaddr *name, \
			    socklen_t namelen); }
105	STD		{ int|sys||setsockopt(int s, int level, int name, \
			    const void *val, socklen_t valsize); }
106	STD		{ int|sys||listen(int s, int backlog); }
107	OBSOL		vtimes
108	UNIMPL
109	UNIMPL
110	UNIMPL
111	UNIMPL
112	UNIMPL
113	UNIMPL
114	UNIMPL
115	OBSOL		vtrace
116	UNIMPL
117	UNIMPL
118	STD		{ int|sys||getsockopt(int s, int level, int name, \
			    void *val, socklen_t *avalsize); }
119	OBSOL		resuba
120	STD 		{ ssize_t|sys||readv(int fd, \
			    const struct iovec *iovp, int iovcnt); }
121	STD 		{ ssize_t|sys||writev(int fd, \
			    const struct iovec *iovp, int iovcnt); }
122	UNIMPL
123	STD 		{ int|sys||fchown(int fd, uid_t uid, gid_t gid); }
124	STD 		{ int|sys||fchmod(int fd, mode_t mode); }
125	UNIMPL
126	STD 		{ int|sys||setreuid(uid_t ruid, uid_t euid); }
127	STD 		{ int|sys||setregid(gid_t rgid, gid_t egid); }
128	STD 		{ int|sys||rename(const char *from, const char *to); }
129	UNIMPL
130	UNIMPL
131	STD 		{ int|sys||flock(int fd, int how); }
132	STD 		{ int|sys||mkfifo(const char *path, mode_t mode); }
133	STD 		{ ssize_t|sys||sendto(int s, const void *buf, \
			    size_t len, int flags, const struct sockaddr *to, \
			    socklen_t tolen); }
134	STD		{ int|sys||shutdown(int s, int how); }
135	STD		{ int|sys||socketpair(int domain, int type, \
			    int protocol, int *rsv); }
136	STD 		{ int|sys||mkdir(const char *path, mode_t mode); }
137	STD 		{ int|sys||rmdir(const char *path); }
138	UNIMPL
139	OBSOL		4.2 sigreturn
140	UNIMPL
141	UNIMPL
142	UNIMPL
143	UNIMPL
144	UNIMPL
145	UNIMPL
146	UNIMPL
147	STD 	 	{ int|sys||setsid(void); }
148	UNIMPL
149	UNIMPL
150	UNIMPL

; Syscalls 151-180 inclusive are reserved for vendor-specific
; system calls.  (This includes various calls added for compatibity
; with other Unix variants.)
; Some of these calls are now supported by BSD...
151	UNIMPL
152	UNIMPL
153	UNIMPL
154	UNIMPL
155	STD MODULAR  { int|sys||nfssvc(int flag, void *argp); }
156	UNIMPL
157	UNIMPL
158	UNIMPL
159	UNIMPL
160	UNIMPL
161	UNIMPL
162	UNIMPL
163	UNIMPL
164	UNIMPL
165	STD 		{ int|sys||sysarch(int op, void *parms); }
166	UNIMPL
167	UNIMPL
168	UNIMPL
; XXX more generally, never on machines where sizeof(void *) != sizeof(int)
#if (defined(SYSVSEM) || !defined(_KERNEL_OPT)) && !defined(_LP64)
169	UNIMPL
#else
169	EXCL		1.0 semsys
#endif
; XXX more generally, never on machines where sizeof(void *) != sizeof(int)
#if (defined(SYSVMSG) || !defined(_KERNEL_OPT)) && !defined(_LP64)
170	UNIMPL
#else
170	EXCL		1.0 msgsys
#endif
; XXX more generally, never on machines where sizeof(void *) != sizeof(int)
#if (defined(SYSVSHM) || !defined(_KERNEL_OPT)) && !defined(_LP64)
171	UNIMPL
#else
171	EXCL		1.0 shmsys
#endif
172	UNIMPL
173	STD 		{ ssize_t|sys||pread(int fd, void *buf, \
			    size_t nbyte, int PAD, off_t offset); }
174	STD 		{ ssize_t|sys||pwrite(int fd, const void *buf, \
			    size_t nbyte, int PAD, off_t offset); }
; For some reason, ntp_gettime doesn't want to raise SIGSYS when it's excluded.
175	UNIMPL
#if defined(NTP) || !defined(_KERNEL_OPT)
176	STD 		{ int|sys||ntp_adjtime(struct timex *tp); }
#else
176	EXCL		ntp_adjtime
#endif
177	UNIMPL
178	UNIMPL
179	UNIMPL
180	UNIMPL

; Syscalls 180-199 are used by/reserved for BSD
181	STD 		{ int|sys||setgid(gid_t gid); }
182	STD 		{ int|sys||setegid(gid_t egid); }
183	STD 		{ int|sys||seteuid(uid_t euid); }
184	UNIMPL
185	UNIMPL
186	UNIMPL
187	UNIMPL
188	UNIMPL
189	UNIMPL
190	UNIMPL
191	STD 		{ long|sys||pathconf(const char *path, int name); }
192	STD 		{ long|sys||fpathconf(int fd, int name); }
193	UNIMPL
194	STD 		{ int|sys||getrlimit(int which, \
			    struct rlimit *rlp); }
195	STD 		{ int|sys||setrlimit(int which, \
			    const struct rlimit *rlp); }
196	UNIMPL
197	STD 		{ void *|sys||mmap(void *addr, size_t len, int prot, \
			    int flags, int fd, long PAD, off_t pos); }
198	INDIR		{ quad_t|sys||__syscall(quad_t code, \
			    ... register_t args[SYS_MAXSYSARGS]); }
199	STD 		{ off_t|sys||lseek(int fd, int PAD, off_t offset, \
			    int whence); }
200	STD 		{ int|sys||truncate(const char *path, int PAD, \
			    off_t length); }
201	STD 		{ int|sys||ftruncate(int fd, int PAD, off_t length); }
202	STD	 	{ int|sys||__sysctl(const int *name, u_int namelen, \
			    void *oldv, size_t *oldlenp, const void *newv, \
			    size_t newlen); }
203	STD 		{ int|sys||mlock(const void *addr, size_t len); }
204	STD 		{ int|sys||munlock(const void *addr, size_t len); }
205	STD 		{ int|sys||undelete(const char *path); }
206	UNIMPL
207	STD 		{ pid_t|sys||getpgid(pid_t pid); }
208	STD		{ int|sys||reboot(int opt, char *bootstr); }
209	STD 		{ int|sys||poll(struct pollfd *fds, u_int nfds, \
			    int timeout); }
;
; Syscalls 210-219 are reserved for dynamically loaded syscalls
;
210	EXTERN	MODULAR { int|sys||afssys(long id, long a1, long a2, \
			  long a3, long a4, long a5, long a6); }
211	UNIMPL
212	UNIMPL
213	UNIMPL
214	UNIMPL
215	UNIMPL
216	UNIMPL
217	UNIMPL
218	UNIMPL
219	UNIMPL
; System calls 220-300 are reserved for use by NetBSD
#if defined(SYSVSEM) || !defined(_KERNEL_OPT)
220	UNIMPL
221	STD 		{ int|sys||semget(key_t key, int nsems, int semflg); }
222	STD 		{ int|sys||semop(int semid, struct sembuf *sops, \
			    size_t nsops); }
223	STD 		{ int|sys||semconfig(int flag); }
#else
220	UNIMPL
221	EXCL		semget
222	EXCL		semop
223	EXCL		semconfig
#endif
#if defined(SYSVMSG) || !defined(_KERNEL_OPT)
224	UNIMPL
225	STD 		{ int|sys||msgget(key_t key, int msgflg); }
226	STD 		{ int|sys||msgsnd(int msqid, const void *msgp, \
			    size_t msgsz, int msgflg); }
227	STD 		{ ssize_t|sys||msgrcv(int msqid, void *msgp, \
			    size_t msgsz, long msgtyp, int msgflg); }
#else
224	UNIMPL
225	EXCL 		msgget
226	EXCL 		msgsnd
227	EXCL 		msgrcv
#endif
#if defined(SYSVSHM) || !defined(_KERNEL_OPT)
228	STD 		{ void *|sys||shmat(int shmid, const void *shmaddr, \
			    int shmflg); }
229	UNIMPL
230	STD 		{ int|sys||shmdt(const void *shmaddr); }
231	STD 		{ int|sys||shmget(key_t key, size_t size, int shmflg); }
#else
228	EXCL		shmat
229	UNIMPL
230	EXCL		shmdt
231	EXCL		shmget
#endif
232	UNIMPL
233	UNIMPL
234	UNIMPL
235	STD 	{ int|sys||timer_create(clockid_t clock_id, \
			    struct sigevent *evp, timer_t *timerid); }
236	STD 	{ int|sys||timer_delete(timer_t timerid); }
237	UNIMPL
238	UNIMPL
239	STD 	{ int|sys||timer_getoverrun(timer_t timerid); }
;
; Syscalls 240-269 are reserved for other IEEE Std1003.1b syscalls
;
240	UNIMPL
241	STD 		{ int|sys||fdatasync(int fd); }
242	STD 		{ int|sys||mlockall(int flags); }
243	STD 		{ int|sys||munlockall(void); }
244	UNIMPL
245	STD		{ int|sys||sigqueueinfo(pid_t pid, \
			    const siginfo_t *info); }
246	STD 	{ int|sys||modctl(int cmd, void *arg); }
247	STD MODULAR { int|sys||_ksem_init(unsigned int value, intptr_t *idp); }
248	STD MODULAR { int|sys||_ksem_open(const char *name, int oflag, \
			    mode_t mode, unsigned int value, intptr_t *idp); }
249	STD MODULAR { int|sys||_ksem_unlink(const char *name); }
250	STD MODULAR { int|sys||_ksem_close(intptr_t id); }
251	STD MODULAR { int|sys||_ksem_post(intptr_t id); }
252	STD MODULAR { int|sys||_ksem_wait(intptr_t id); }
253	STD MODULAR { int|sys||_ksem_trywait(intptr_t id); }
254	STD MODULAR { int|sys||_ksem_getvalue(intptr_t id, \
			    unsigned int *value); }
255	STD MODULAR { int|sys||_ksem_destroy(intptr_t id); }
256	STD MODULAR { int|sys||_ksem_timedwait(intptr_t id, \
				const struct timespec *abstime); }
257	STD MODULAR	{ mqd_t|sys||mq_open(const char * name, int oflag, \
			    mode_t mode, struct mq_attr *attr); }
258	STD MODULAR	{ int|sys||mq_close(mqd_t mqdes); }
259	STD MODULAR	{ int|sys||mq_unlink(const char *name); }
260	STD MODULAR	{ int|sys||mq_getattr(mqd_t mqdes, \
			    struct mq_attr *mqstat); }
261	STD MODULAR	{ int|sys||mq_setattr(mqd_t mqdes, \
			    const struct mq_attr *mqstat, \
			    struct mq_attr *omqstat); }
262	STD MODULAR	{ int|sys||mq_notify(mqd_t mqdes, \
			    const struct sigevent *notification); }
263	STD MODULAR	{ int|sys||mq_send(mqd_t mqdes, const char *msg_ptr, \
			    size_t msg_len, unsigned msg_prio); }
264	STD MODULAR	{ ssize_t|sys||mq_receive(mqd_t mqdes, char *msg_ptr, \
			    size_t msg_len, unsigned *msg_prio); }
265	UNIMPL
266	UNIMPL
267	UNIMPL
268	UNIMPL
269	UNIMPL
270	STD 		{ int|sys||__posix_rename(const char *from, \
			    const char *to); }
271	STD 		{ int|sys||swapctl(int cmd, void *arg, int misc); }
272	UNIMPL
273	STD 		{ int|sys||minherit(void *addr, size_t len, \
			    int inherit); }
274	STD 		{ int|sys||lchmod(const char *path, mode_t mode); }
275	STD 		{ int|sys||lchown(const char *path, uid_t uid, \
			    gid_t gid); }
276	UNIMPL
277	STD 		{ int|sys|13|msync(void *addr, size_t len, int flags); }
278	UNIMPL
279	UNIMPL
280	UNIMPL
281	STD 		{ int|sys|14|sigaltstack( \
			    const struct sigaltstack *nss, \
			    struct sigaltstack *oss); }
282	STD 		{ int|sys|14|vfork(void); }
283	STD 		{ int|sys||__posix_chown(const char *path, uid_t uid, \
			    gid_t gid); }
284	STD 		{ int|sys||__posix_fchown(int fd, uid_t uid, \
			    gid_t gid); }
285	STD 		{ int|sys||__posix_lchown(const char *path, uid_t uid, \
			    gid_t gid); }
286	STD 		{ pid_t|sys||getsid(pid_t pid); }
287	STD 		{ pid_t|sys||__clone(int flags, void *stack); }
288	STD 		{ int|sys||fktrace(int fd, int ops, \
			    int facs, pid_t pid); }
289	STD 		{ ssize_t|sys||preadv(int fd, \
			    const struct iovec *iovp, int iovcnt, \
			    int PAD, off_t offset); }
290	STD 		{ ssize_t|sys||pwritev(int fd, \
			    const struct iovec *iovp, int iovcnt, \
			    int PAD, off_t offset); }
291	UNIMPL
292	STD 		{ int|sys|14|sigpending(sigset_t *set); }
293	STD 		{ int|sys|14|sigprocmask(int how, \
			    const sigset_t *set, \
			    sigset_t *oset); }
294	STD 		{ int|sys|14|sigsuspend(const sigset_t *set); }
295	UNIMPL
296	STD 		{ int|sys||__getcwd(char *bufp, size_t length); }
297	STD 		{ int|sys||fchroot(int fd); }
298	UNIMPL
299	UNIMPL
300	UNIMPL
#if defined(SYSVSEM) || !defined(_KERNEL_OPT)
301	UNIMPL
#else
301	EXCL		____semctl13
#endif
#if defined(SYSVMSG) || !defined(_KERNEL_OPT)
302	UNIMPL
#else
302	EXCL		__msgctl13
#endif
#if defined(SYSVSHM) || !defined(_KERNEL_OPT)
303	UNIMPL
#else
303	EXCL		__shmctl13
#endif
304	STD 		{ int|sys||lchflags(const char *path, u_long flags); }
305	NOERR 		{ int|sys||issetugid(void); }
306	STD		{ int|sys||utrace(const char *label, void *addr, \
				size_t len); }
307	STD 		{ int|sys||getcontext(struct __ucontext *ucp); }
308	STD 		{ int|sys||setcontext(const struct __ucontext *ucp); }
309	STD 		{ int|sys||_lwp_create(const struct __ucontext *ucp, \
				u_long flags, lwpid_t *new_lwp); }
310	STD 		{ int|sys||_lwp_exit(void); }
311	STD 		{ lwpid_t|sys||_lwp_self(void); }
312	STD 		{ int|sys||_lwp_wait(lwpid_t wait_for, \
				lwpid_t *departed); }
313	STD 		{ int|sys||_lwp_suspend(lwpid_t target); }
314	STD 		{ int|sys||_lwp_continue(lwpid_t target); }
315	STD 		{ int|sys||_lwp_wakeup(lwpid_t target); }
316	STD 		{ void *|sys||_lwp_getprivate(void); }
317	STD 		{ void|sys||_lwp_setprivate(void *ptr); }
318	STD 		{ int|sys||_lwp_kill(lwpid_t target, int signo); }
319	STD 		{ int|sys||_lwp_detach(lwpid_t target); }
320	UNIMPL
321	STD 		{ int|sys||_lwp_unpark(lwpid_t target, const void *hint); }
322	STD 		{ ssize_t|sys||_lwp_unpark_all(const lwpid_t *targets, \
				size_t ntargets, const void *hint); }
323	STD 		{ int|sys||_lwp_setname(lwpid_t target, \
				const char *name); }
324	STD 		{ int|sys||_lwp_getname(lwpid_t target, \
				char *name, size_t len); }
325	STD 		{ int|sys||_lwp_ctl(int features, \
				struct lwpctl **address); }
; Syscalls 326-339 reserved for LWP syscalls.
326	UNIMPL
327	UNIMPL
328	UNIMPL
329	UNIMPL
; SA system calls.
330	UNIMPL
331	UNIMPL
332	UNIMPL
333	UNIMPL
334	UNIMPL
335	UNIMPL
336	OBSOL 		sys_sa_unblockyield
;
; Syscalls 337-339 are reserved for other scheduler activation syscalls.
;
337	UNIMPL
338	UNIMPL
339	UNIMPL
340	STD 		{ int|sys||__sigaction_sigtramp(int signum, \
			    const struct sigaction *nsa, \
			    struct sigaction *osa, \
			    const void *tramp, int vers); }
341	STD		{ int|sys||pmc_get_info(int ctr, int op, void *args); }
342	STD		{ int|sys||pmc_control(int ctr, int op, void *args); }
343	STD 		{ int|sys||rasctl(void *addr, size_t len, int op); }
344	STD		{ int|sys||kqueue(void); }
345	UNIMPL

; Scheduling system calls.
346	STD 		{ int|sys||_sched_setparam(pid_t pid, lwpid_t lid, \
			    int policy, const struct sched_param *params); }
347	STD 		{ int|sys||_sched_getparam(pid_t pid, lwpid_t lid, \
			    int *policy, struct sched_param *params); }
348	STD 		{ int|sys||_sched_setaffinity(pid_t pid, lwpid_t lid, \
			    size_t size, const cpuset_t *cpuset); }
349	STD 		{ int|sys||_sched_getaffinity(pid_t pid, lwpid_t lid, \
			    size_t size, cpuset_t *cpuset); }
350	STD 		{ int|sys||sched_yield(void); }
351	UNIMPL
352	UNIMPL
353	UNIMPL

354	STD		{ int|sys||fsync_range(int fd, int flags, off_t start, \
			    off_t length); }
355	STD 		{ int|sys||uuidgen(struct uuid *store, int count); }
356	STD 		{ int|sys||getvfsstat(struct statvfs *buf, \
			    size_t bufsize, int flags); }
357	STD 		{ int|sys||statvfs1(const char *path, \
			    struct statvfs *buf, int flags); }
358	STD 		{ int|sys||fstatvfs1(int fd, struct statvfs *buf, \
			    int flags); }
359	UNIMPL
360	STD 		{ int|sys||extattrctl(const char *path, int cmd, \
			    const char *filename, int attrnamespace, \
			    const char *attrname); }
361	STD 		{ int|sys||extattr_set_file(const char *path, \
			    int attrnamespace, const char *attrname, \
			    const void *data, size_t nbytes); }
362	STD 		{ ssize_t|sys||extattr_get_file(const char *path, \
			    int attrnamespace, const char *attrname, \
			    void *data, size_t nbytes); }
363	STD 		{ int|sys||extattr_delete_file(const char *path, \
			    int attrnamespace, const char *attrname); }
364	STD 		{ int|sys||extattr_set_fd(int fd, \
			    int attrnamespace, const char *attrname, \
			    const void *data, size_t nbytes); }
365	STD 		{ ssize_t|sys||extattr_get_fd(int fd, \
			    int attrnamespace, const char *attrname, \
			    void *data, size_t nbytes); }
366	STD 		{ int|sys||extattr_delete_fd(int fd, \
			    int attrnamespace, const char *attrname); }
367	STD 		{ int|sys||extattr_set_link(const char *path, \
			    int attrnamespace, const char *attrname, \
			    const void *data, size_t nbytes); }
368	STD 		{ ssize_t|sys||extattr_get_link(const char *path, \
			    int attrnamespace, const char *attrname, \
			    void *data, size_t nbytes); }
369	STD 		{ int|sys||extattr_delete_link(const char *path, \
			    int attrnamespace, const char *attrname); }
370	STD 		{ ssize_t|sys||extattr_list_fd(int fd, \
			    int attrnamespace, void *data, size_t nbytes); }
371	STD 		{ ssize_t|sys||extattr_list_file(const char *path, \
			    int attrnamespace, void *data, size_t nbytes); }
372	STD 		{ ssize_t|sys||extattr_list_link(const char *path, \
			    int attrnamespace, void *data, size_t nbytes); }
373	UNIMPL
374	UNIMPL
375	STD 		{ int|sys||setxattr(const char *path, \
			    const char *name, const void *value, size_t size, \
			    int flags); }
376	STD 		{ int|sys||lsetxattr(const char *path, \
			    const char *name, const void *value, size_t size, \
			    int flags); }
377	STD 		{ int|sys||fsetxattr(int fd, \
			    const char *name, const void *value, size_t size, \
			    int flags); }
378	STD 		{ int|sys||getxattr(const char *path, \
			    const char *name, void *value, size_t size); }
379	STD 		{ int|sys||lgetxattr(const char *path, \
			    const char *name, void *value, size_t size); }
380	STD 		{ int|sys||fgetxattr(int fd, \
			    const char *name, void *value, size_t size); }
381	STD 		{ int|sys||listxattr(const char *path, \
			    char *list, size_t size); }
382	STD 		{ int|sys||llistxattr(const char *path, \
			    char *list, size_t size); }
383	STD 		{ int|sys||flistxattr(int fd, \
			    char *list, size_t size); }
384	STD 		{ int|sys||removexattr(const char *path, \
			    const char *name); }
385	STD 		{ int|sys||lremovexattr(const char *path, \
			    const char *name); }
386	STD 		{ int|sys||fremovexattr(int fd, \
			    const char *name); }
387	UNIMPL
388	UNIMPL
389	UNIMPL
390	STD 		{ int|sys|30|getdents(int fd, char *buf, size_t count); }
391	IGNORED		old posix_fadvise
392	UNIMPL
393	UNIMPL
394	STD		{ int|sys|30|socket(int domain, int type, int protocol); }
395	STD 		{ int|sys|30|getfh(const char *fname, void *fhp, \
			    size_t *fh_size); }
396	STD 		{ int|sys|40|fhopen(const void *fhp, size_t fh_size,\
			    int flags); }
397	STD 		{ int|sys|40|fhstatvfs1(const void *fhp, \
			    size_t fh_size, struct statvfs *buf, int flags); }
398	UNIMPL

; Asynchronous I/O system calls
399	STD MODULAR	{ int|sys||aio_cancel(int fildes, struct aiocb *aiocbp); }
400	STD MODULAR	{ int|sys||aio_error(const struct aiocb *aiocbp); }
401	STD MODULAR	{ int|sys||aio_fsync(int op, struct aiocb *aiocbp); }
402	STD MODULAR	{ int|sys||aio_read(struct aiocb *aiocbp); }
403	STD MODULAR	{ int|sys||aio_return(struct aiocb *aiocbp); }
404	UNIMPL
405	STD MODULAR	{ int|sys||aio_write(struct aiocb *aiocbp); }
406	STD MODULAR	{ int|sys||lio_listio(int mode, struct aiocb *const *list, \
				    int nent, struct sigevent *sig); }

407	UNIMPL
408	UNIMPL
409	UNIMPL

410	STD 	{ int|sys|50|mount(const char *type, \
			    const char *path, int flags, void *data, \
			    size_t data_len); }
411	STD 		{ void *|sys||mremap(void *old_address, size_t old_size, \
			    void *new_address, size_t new_size, int flags); }

; Processor-sets system calls
412	STD 		{ int|sys||pset_create(psetid_t *psid); }
413	STD 		{ int|sys||pset_destroy(psetid_t psid); }
414	STD 		{ int|sys||pset_assign(psetid_t psid, cpuid_t cpuid, \
			    psetid_t *opsid); }
415	STD 		{ int|sys||_pset_bind(idtype_t idtype, id_t first_id, \
			    id_t second_id, psetid_t psid, psetid_t *opsid); }
416	NOERR	{ int|sys|50|posix_fadvise(int fd, int PAD, \
			    off_t offset, off_t len, int advice); }
417	STD 	{ int|sys|50|select(int nd, fd_set *in, fd_set *ou, \
			    fd_set *ex, struct timeval *tv); }
418	STD 	{ int|sys|50|gettimeofday(struct timeval *tp, \
			    void *tzp); }
419	STD 	{ int|sys|50|settimeofday(const struct timeval *tv, \
			    const void *tzp); }
420	STD 	{ int|sys|50|utimes(const char *path, \
			    const struct timeval *tptr); }
421	STD 	{ int|sys|50|adjtime(const struct timeval *delta, \
			    struct timeval *olddelta); }
422	UNIMPL
423	STD 	{ int|sys|50|futimes(int fd, \
			    const struct timeval *tptr); }
424	STD  	{ int|sys|50|lutimes(const char *path, \
			    const struct timeval *tptr); }
425	STD 	{ int|sys|50|setitimer(int which, \
			    const struct itimerval *itv, \
			    struct itimerval *oitv); }
426	STD 	{ int|sys|50|getitimer(int which, \
			    struct itimerval *itv); }
427	STD 	{ int|sys|50|clock_gettime(clockid_t clock_id, \
			    struct timespec *tp); }
428	STD 	{ int|sys|50|clock_settime(clockid_t clock_id, \
			    const struct timespec *tp); }
429	STD 	{ int|sys|50|clock_getres(clockid_t clock_id, \
			    struct timespec *tp); }
430	STD 	{ int|sys|50|nanosleep(const struct timespec *rqtp, \
			    struct timespec *rmtp); }
431	STD 		{ int|sys|50|__sigtimedwait(const sigset_t *set, \
			    siginfo_t *info, \
			    struct timespec *timeout); }
432	STD MODULAR	{ int|sys|50|mq_timedsend(mqd_t mqdes, \
			    const char *msg_ptr, size_t msg_len, \
			    unsigned msg_prio, \
			    const struct timespec *abs_timeout); }
433	STD MODULAR	{ ssize_t|sys|50|mq_timedreceive(mqd_t mqdes, \
			    char *msg_ptr, size_t msg_len, unsigned *msg_prio, \
			    const struct timespec *abs_timeout); }
434	UNIMPL
435	STD		{ int|sys|50|kevent(int fd, \
			    const struct kevent *changelist, size_t nchanges, \
			    struct kevent *eventlist, size_t nevents, \
			    const struct timespec *timeout); }
436	STD 		{ int|sys|50|pselect(int nd, fd_set *in, fd_set *ou, \
			    fd_set *ex, const struct timespec *ts, \
			    const sigset_t *mask); }
437	STD 		{ int|sys|50|pollts(struct pollfd *fds, u_int nfds, \
			    const struct timespec *ts, const sigset_t *mask); }
438	STD MODULAR { int|sys|50|aio_suspend( \
			    const struct aiocb *const *list, \
			    int nent, const struct timespec *timeout); }
439	STD 	{ int|sys|50|stat(const char *path, struct stat *ub); }
440	STD 	{ int|sys|50|fstat(int fd, struct stat *sb); }
441	STD 	{ int|sys|50|lstat(const char *path, struct stat *ub); }
#if defined(SYSVSEM) || !defined(_KERNEL_OPT)
442	STD 		{ int|sys|50|__semctl(int semid, int semnum, int cmd, \
			    ... union __semun *arg); }
#else
442	EXCL		____semctl50
#endif
#if defined(SYSVSHM) || !defined(_KERNEL_OPT)
443	STD 		{ int|sys|50|shmctl(int shmid, int cmd, \
			    struct shmid_ds *buf); }
#else
443	EXCL 		____shmctl50
#endif
#if defined(SYSVMSG) || !defined(_KERNEL_OPT)
444	STD 		{ int|sys|50|msgctl(int msqid, int cmd, \
			    struct msqid_ds *buf); }
#else
444	EXCL 		____msgctl50
#endif
445	STD 		{ int|sys|50|getrusage(int who, struct rusage *rusage); }
446	STD 	{ int|sys|50|timer_settime(timer_t timerid, \
			    int flags, const struct itimerspec *value, \
			    struct itimerspec *ovalue); }
447	STD 	{ int|sys|50|timer_gettime(timer_t timerid, struct \
			    itimerspec *value); }
#if defined(NTP) || !defined(_KERNEL_OPT)
448	STD		{ int|sys|50|ntp_gettime(struct ntptimeval *ntvp); }
#else
448	EXCL		___ntp_gettime50
#endif
449	STD 		{ int|sys|50|wait4(pid_t pid, int *status, \
				    int options, struct rusage *rusage); }
450	STD 	{ int|sys|50|mknod(const char *path, mode_t mode, \
			    dev_t dev); }
451	STD  	{ int|sys|50|fhstat(const void *fhp, \
			    size_t fh_size, struct stat *sb); }
; 452 only ever appeared in 5.99.x and can be reused after netbsd-7
452	OBSOL		5.99 quotactl
453	STD 	{ int|sys||pipe2(int *fildes, int flags); }
454	STD 	{ int|sys||dup3(int from, int to, int flags); }
455	STD 	{ int|sys||kqueue1(int flags); }
456	STD 	{ int|sys||paccept(int s, struct sockaddr *name, \
			    socklen_t *anamelen, const sigset_t *mask, \
			    int flags); }
457	STD 	{ int|sys||linkat(int fd1, const char *name1, \
			    int fd2, const char *name2, int flags); }
458	STD 	{ int|sys||renameat(int fromfd, const char *from, \
			    int tofd, const char *to); }
459	STD 	{ int|sys||mkfifoat(int fd, const char *path, \
			    mode_t mode); }
460	STD 	{ int|sys||mknodat(int fd, const char *path, \
			    mode_t mode, int PAD, dev_t dev); }
461	STD 	{ int|sys||mkdirat(int fd, const char *path, \
			    mode_t mode); }
462	STD 	{ int|sys||faccessat(int fd, const char *path, \
			    int amode, int flag); }
463	STD 	{ int|sys||fchmodat(int fd, const char *path, \
			    mode_t mode, int flag); }
464	STD 	{ int|sys||fchownat(int fd, const char *path, \
			    uid_t owner, gid_t group, int flag); }
465	STD  		{ int|sys||fexecve(int fd, \
			    char * const *argp, char * const *envp); }
466	STD 	{ int|sys||fstatat(int fd, const char *path, \
			    struct stat *buf, int flag); }
467	STD 	{ int|sys||utimensat(int fd, const char *path, \
			    const struct timespec *tptr, int flag); }
468	STD 	{ int|sys||openat(int fd, const char *path, \
			    int oflags, ... mode_t mode); }
469	STD 	{ ssize_t|sys||readlinkat(int fd, const char *path, \
			    char *buf, size_t bufsize); }
470	STD 	{ int|sys||symlinkat(const char *path1, int fd, \
			    const char *path2); }
471	STD 	{ int|sys||unlinkat(int fd, const char *path, \
			    int flag); }
472	STD 	{ int|sys||futimens(int fd, \
			    const struct timespec *tptr); }
473	STD 	{ int|sys||__quotactl(const char *path, \
			    struct quotactl_args *args); }
474	NOERR		{ int|sys||posix_spawn(pid_t *pid, const char *path, \
			    const struct posix_spawn_file_actions *file_actions, \
			    const struct posix_spawnattr *attrp, \
			    char *const *argv, char *const *envp); }
475	STD 	{ int|sys||recvmmsg(int s, struct mmsghdr *mmsg, \
			    unsigned int vlen, unsigned int flags, \
			    struct timespec *timeout); }
476	STD 	{ int|sys||sendmmsg(int s, struct mmsghdr *mmsg, \
			    unsigned int vlen, unsigned int flags); }
477	STD 	{ int|sys||clock_nanosleep(clockid_t clock_id, \
			    int flags, const struct timespec *rqtp, \
			    struct timespec *rmtp); }
478	STD 		{ int|sys|60|_lwp_park(clockid_t clock_id, int flags, \
			    const struct timespec *ts, lwpid_t unpark, \
			    const void *hint, const void *unparkhint); }
479	STD 	{ int|sys||posix_fallocate(int fd, int PAD, off_t pos, \
			    off_t len); }
480	STD 	{ int|sys||fdiscard(int fd, int PAD, off_t pos, \
			    off_t len); }
